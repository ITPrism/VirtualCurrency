<?php
/**
 * @package      Virtualcurrency
 * @subpackage   Components
 * @author       Todor Iliev
 * @copyright    Copyright (C) 2016 Todor Iliev <todor@itprism.com>. All rights reserved.
 * @license      GNU General Public License version 3 or later; see LICENSE.txt
 */

use Joomla\String\StringHelper as JStringHelper;

// no direct access
defined('_JEXEC') or die;

class VirtualcurrencyModelImport extends JModelForm
{

    /**
     * Method to get the record form.
     *
     * @param   array   $data     An optional array of data for the form to interogate.
     * @param   boolean $loadData True if the form is to load its own data (default case), false if not.
     *
     * @return  JForm   A JForm object on success, false on failure
     * @since   1.6
     */
    public function getForm($data = array(), $loadData = true)
    {
        // Get the form.
        $form = $this->loadForm($this->option . '.import', 'import', array('control' => 'jform', 'load_data' => $loadData));
        if (empty($form)) {
            return false;
        }

        return $form;
    }

    /**
     * Method to get the data that should be injected in the form.
     *
     * @return  mixed   The data for the form.
     * @since   1.6
     */
    protected function loadFormData()
    {
        // Check the session for previously entered form data.
        $data = JFactory::getApplication()->getUserState($this->option . '.edit.import.data', array());

        return $data;
    }

    public function uploadFile($uploadedFileData, $type)
    {
        $app = JFactory::getApplication();
        /** @var $app JApplicationAdministrator */

        $uploadedFile = Joomla\Utilities\ArrayHelper::getValue($uploadedFileData, 'tmp_name');
        $uploadedName = Joomla\Utilities\ArrayHelper::getValue($uploadedFileData, 'name');
        $errorCode    = Joomla\Utilities\ArrayHelper::getValue($uploadedFileData, 'error');

        // Prepare size validator.
        $KB       = pow(1024, 2);
        $fileSize = (int)$app->input->server->get('CONTENT_LENGTH');

        $mediaParams   = JComponentHelper::getParams('com_media');
        /** @var $mediaParams Joomla\Registry\Registry */

        $uploadMaxSize = $mediaParams->get('upload_maxsize') * $KB;

        // Prepare size validator.
        $sizeValidator = new Prism\File\Validator\Size($fileSize, $uploadMaxSize);

        // Prepare server validator.
        $serverValidator = new Prism\File\Validator\Server($errorCode, array(UPLOAD_ERR_NO_FILE));

        $file = new Prism\File\File($uploadedFile);
        $file
            ->addValidator($sizeValidator)
            ->addValidator($serverValidator);

        // Validate the file
        if (!$file->isValid()) {
            throw new RuntimeException($file->getError());
        }

        $ext           = JStringHelper::strtolower(JFile::makeSafe(JFile::getExt($uploadedName)));
        $filename      = Prism\Utilities\StringHelper::generateRandomString(12) . '.'. $ext;
        $sourceFile    = JPath::clean($app->get('tmp_path') .'/'. $filename);

        // Upload the file.
        if (!JFile::upload($uploadedFile, $sourceFile)) {
            throw new \RuntimeException(\JText::_('COM_VIRTUALCURRENCY_ERROR_FILE_CANT_BE_UPLOADED'));
        }

        // Extract file if it is archive
        if (strcmp($ext, 'zip') === 0) {
            $destFolder = JPath::clean($app->get('tmp_path') .'/'. $type);
            if (is_dir($destFolder)) {
                JFolder::delete($destFolder);
            }

            $filePath = $this->extractFile($sourceFile, $destFolder);

        } else {
            $filePath = $sourceFile;
        }

        return $filePath;
    }

    public function extractFile($file, $destFolder)
    {
        jimport('joomla.filesystem.archive');

        $filePath = null;

        // extract type
        $zipAdapter = JArchive::getAdapter('zip');
        $zipAdapter->extract($file, $destFolder);

        $dir = new DirectoryIterator($destFolder);

        foreach ($dir as $fileinfo) {
            if (!$fileinfo->isDot()) {
                $filePath = JPath::clean($destFolder .'/'. JFile::makeSafe($fileinfo->getFilename()));
                break;
            }
        }

        return $filePath;
    }

    /**
     *
     * Import currencies from XML file.
     * The XML file is generated by the current extension ( Challenges )
     *
     * @param string $file    A path to file
     * @param bool   $resetId Reset existing IDs with new ones.
     */
    public function importCurrencies($file, $resetId = false)
    {
        $xmlstr  = file_get_contents($file);
        $content = new SimpleXMLElement($xmlstr);

        if ($content !== null) {
            // Check for existed currencies.
            $db    = $this->getDbo();
            $query = $db->getQuery(true);
            $query
                ->select('COUNT(*)')
                ->from($db->quoteName('#__vc_realcurrencies', 'a'));

            $db->setQuery($query);
            $result = $db->loadResult();

            if ($result !== null and (int)$result > 0) { // Update current currencies and insert newest.
                $this->updateCurrencies($content);
            } else { // Insert new ones
                $this->insertCurrencies($content, $resetId);
            }
        }
    }

    /**
     * @param array $content
     * @param bool $resetId
     */
    protected function insertCurrencies($content, $resetId)
    {
        $items = array();

        $db = $this->getDbo();

        // Generate data for importing.
        foreach ($content as $item) {
            $title = JStringHelper::trim($item->title);
            $code  = JStringHelper::trim($item->code);
            if (!$title or !$code) {
                continue;
            }

            $id = 'null';
            if (!$resetId and (isset($item->id) and (int)$item->id)) {
                $id = (int)$item->id;
            }

            $items[] = $id . ',' . $db->quote($title) . ',' . $db->quote($code) . ',' . $db->quote(JStringHelper::trim($item->symbol)) . ',' . (int)$item->position;
        }

        $columns = array('id', 'title', 'code', 'symbol', 'position');

        $query = $db->getQuery(true);
        $query
            ->insert($db->quoteName('#__vc_realcurrencies'))
            ->columns($db->quoteName($columns))
            ->values($items);

        $db->setQuery($query);
        $db->execute();
    }

    /**
     * Update the currencies with new columns.
     *
     * @param SimpleXMLElement $content
     */
    protected function updateCurrencies($content)
    {
        JLoader::register('VirtualcurrencyTableRealCurrency', JPATH_ADMINISTRATOR .'/components/com_virtualcurrency/tables/realcurrency.php');
        $db = $this->getDbo();

        foreach ($content as $item) {
            $code = trim($item->code);

            $keys = array('code' => $code);

            $table = new VirtualcurrencyTableRealCurrency($db);
            $table->load($keys);

            if (!$table->get('id')) {
                $table->set('title', trim($item->title));
                $table->set('code', $code);
                $table->set('position', 0);
            }

            // Update the symbol if missing.
            if (!$table->get('symbol') and $item->symbol !== '') {
                $table->set('symbol', trim($item->symbol));
            }

            $table->store();
        }
    }

    public function removeAll()
    {
        $db = $this->getDbo();
        $db->truncateTable('#__vc_realcurrencies');
    }
}
