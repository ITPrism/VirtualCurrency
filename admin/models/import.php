<?php
/**
 * @package      VirtualCurrency
 * @subpackage   Components
 * @author       Todor Iliev
 * @copyright    Copyright (C) 2014 Todor Iliev <todor@itprism.com>. All rights reserved.
 * @license      http://www.gnu.org/copyleft/gpl.html GNU/GPL
 */

// no direct access
defined('_JEXEC') or die;

jimport('joomla.application.component.modelform');

class VirtualCurrencyModelImport extends JModelForm
{

    /**
     * Method to get the record form.
     *
     * @param   array   $data     An optional array of data for the form to interogate.
     * @param   boolean $loadData True if the form is to load its own data (default case), false if not.
     *
     * @return  JForm   A JForm object on success, false on failure
     * @since   1.6
     */
    public function getForm($data = array(), $loadData = true)
    {
        // Get the form.
        $form = $this->loadForm($this->option . '.import', 'import', array('control' => 'jform', 'load_data' => $loadData));
        if (empty($form)) {
            return false;
        }

        return $form;
    }

    /**
     * Method to get the data that should be injected in the form.
     *
     * @return  mixed   The data for the form.
     * @since   1.6
     */
    protected function loadFormData()
    {
        // Check the session for previously entered form data.
        $data = JFactory::getApplication()->getUserState($this->option . '.edit.import.data', array());

        return $data;
    }

    public function extractFile($file, $destFolder)
    {

        $filePath = null;

        // extract type
        $zipAdapter = JArchive::getAdapter('zip');
        $zipAdapter->extract($file, $destFolder);

        $dir = new DirectoryIterator($destFolder);

        $fileName = JFile::stripExt(basename($file));

        foreach ($dir as $fileinfo) {

            $currentFileName = JFile::stripExt($fileinfo->getFilename());

            if (!$fileinfo->isDot() and strcmp($fileName, $currentFileName) == 0) {
                $filePath = $destFolder . DIRECTORY_SEPARATOR . JFile::makeSafe($fileinfo->getFilename());
                break;
            }

        }

        return $filePath;
    }

    /**
     *
     * Import currencies from XML file.
     * The XML file is generated by the current extension ( VirtualCurrency )
     *
     * @param string $file    A path to file
     * @param bool   $resetId Reset existing IDs with new ones.
     */
    public function importCurrencies($file, $resetId = false)
    {
        $xmlstr  = file_get_contents($file);
        $content = new SimpleXMLElement($xmlstr);

        if (!empty($content)) {

            // Check for existed currencies.
            $db    = $this->getDbo();
            $query = $db->getQuery(true);
            $query
                ->select("COUNT(*)")
                ->from($db->quoteName("#__vc_realcurrencies", "a"));

            $db->setQuery($query);
            $result = $db->loadResult();

            if (!empty($result)) { // Update current currencies and insert newest.
                $this->updateCurrenices($content, $resetId);
            } else { // Insert new ones
                $this->insertCurrencies($content, $resetId);
            }
        }
    }

    protected function insertCurrencies($content, $resetId)
    {
        $items = array();

        $db = $this->getDbo();

        // Generate data for importing.
        foreach ($content as $item) {

            $title = JString::trim($item->title);
            $code  = JString::trim($item->abbr);
            if (!$title or !$code) {
                continue;
            }

            $id = (!$resetId) ? (int)$item->id : "null";

            $items[] = $id . "," . $db->quote($title) . "," . $db->quote($code) . "," . $db->quote(JString::trim($item->symbol)) . "," . (int)$item->position;
        }

        unset($content);

        $query = $db->getQuery(true);

        $query
            ->insert("#__vc_realcurrencies")
            ->columns('id, title, abbr, symbol, position')
            ->values($items);

        $db->setQuery($query);
        $db->execute();
    }

    /**
     * Update the currencies with new columns.
     */
    protected function updateCurrenices($content)
    {
        JLoader::register(
            "VirtualCurrencyTableRealCurrency",
            JPATH_ADMINISTRATOR .DIRECTORY_SEPARATOR. "components" .DIRECTORY_SEPARATOR. "com_virtualcurrency" .DIRECTORY_SEPARATOR. "tables" .DIRECTORY_SEPARATOR. "realcurrency.php"
        );
        $db = $this->getDbo();

        foreach ($content as $item) {

            $abbr = JString::trim($item->abbr);

            $keys = array("abbr" => $abbr);

            $table = new VirtualCurrencyTableRealCurrency($db);
            $table->load($keys);

            if (!$table->get("id")) {
                $table->set("title", JString::trim($item->title));
                $table->set("abbr", $abbr);
                $table->set("position", 0);
            }

            // Update the symbol if missing.
            if (!$table->get("symbol") and !empty($item->symbol)) {
                $table->set("symbol", JString::trim($item->symbol));
            }

            $table->store();
        }

    }

    public function removeAll()
    {
        $db = $this->getDbo();
        $db->truncateTable("#__vc_realcurrencies");
    }
}
